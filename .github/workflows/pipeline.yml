name: Terraform CI/CD Pipeline with Docker Image

on:
  push:
    branches:
      - master # Trigger on push to the 'main' branch

jobs:
  terraform:
    name: Run Terraform
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker Image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t gitkeeper05/wanttotestendtoendcicd:latest --push .

      # Set SSH Public Key as a Terraform Variable -> this will make it available for pipepline env
      - name: Set SSH Public Key for Terraform
        run: echo "ssh_public_key=${{ secrets.AWS_SSH_PUBLIC_KEY }}" >> $GITHUB_ENV
      #Install terra form on brum brum
      - name: Setting up Terraform
        uses: hashicorp/setup-terraform@v3

      # Set up Terraform Cloud Token as an environment variable (Do it not done yet)
      - name: Set up Terraform Cloud Token
        run: echo "TERRAFORM_CLOUD_TOKEN=${{ secrets.TERRAFORM_CLOUD_TOKEN }}" >> $GITHUB_ENV

      - name: Run Terraform login script
        run: |
          echo '#!/bin/bash
          TOKEN=${{ secrets.TERRAFORM_CLOUD_TOKEN }}
          TF_CREDENTIALS_FILE="$HOME/.terraform.d/credentials.tfrc.json"
          mkdir -p "$(dirname "$TF_CREDENTIALS_FILE")"
          printf '\''{
          "credentials": {
            "app.terraform.io": {
              "token": "%s"
            }
          }
          }'\'' "$TOKEN" > "$TF_CREDENTIALS_FILE"
          echo "Token saved to $TF_CREDENTIALS_FILE"
          ' > terraform-login.sh
          chmod +x terraform-login.sh
          ./terraform-login.sh

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Plan Terraform deployment
      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="ssh_public_key=${{ secrets.AWS_SSH_PUBLIC_KEY }}"

      # Apply Terraform configuration
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
